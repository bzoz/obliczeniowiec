{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PerformaceBar","props","color","value","react_default","a","createElement","reactstrap_es","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","performance","question","anwser","currentAnwser","_this2","setInterval","newLevel","setState","console","log","$","document","keyup","removeClass","keydown","key","which","slice","limit","argA","Math","floor","random","argB","concat","max","min","addClass","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAMA,SAASA,EAAcC,GACrB,IAAIC,EAKJ,OAJID,EAAME,MAAQ,GAChBD,EAAQ,SACDD,EAAME,MAAQ,KACrBD,EAAQ,WAERE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUJ,MAAOF,EAAME,MAAOD,MAAOA,QAqF1BM,cAhFb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAQ,CACXC,MAAO,EACPC,YAAa,EACbC,SAAU,0CACVC,OAAQ,GACRC,cAAe,IAPAZ,mFAWC,IAAAa,EAAAV,KAClBW,YAAY,WACV,IAAIC,EAAWF,EAAKN,MAAME,YAAc,EACpCM,EAAW,IACbA,EAAW,GACbF,EAAKG,SAAS,CAACP,YAAaM,KAE3B,KACHE,QAAQC,IAAIC,IAAEC,WACdD,IAAEC,UAAUC,MAAM,WAAQF,IAAE,aAAaG,YAAY,oBACrDH,IAAEC,UAAUG,QAAQ,SAACC,GAEnB,GADAL,IAAE,aAAaG,YAAY,kBACT,IAAdE,EAAIC,MACNZ,EAAKG,SAAS,CAACJ,cAAeC,EAAKN,MAAMK,cAAcc,MAAM,GAAI,UAC5D,GAAkB,KAAdF,EAAIC,MACb,GAAIZ,EAAKN,MAAMK,gBAAkBC,EAAKN,MAAMI,OAAQ,CAClD,IAAIgB,EAAQ,GACRd,EAAKN,MAAME,YAAc,KAAIkB,EAAQ,IACrCd,EAAKN,MAAME,YAAc,KAAIkB,EAAQ,IACrCd,EAAKN,MAAME,YAAc,KAAIkB,EAAQ,IACzC,IAEIjB,EAAUC,EAFRiB,EAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,GAClCK,EAAOH,KAAKC,MAAMD,KAAKE,SAAWJ,GAEpCE,KAAKE,SAAW,IAClBrB,EAAQ,GAAAuB,OAAML,EAAN,OAAAK,OAAgBD,EAAhB,OACRrB,EAAM,GAAAsB,OAAML,EAAOI,KAEnBtB,EAAQ,GAAAuB,OAAMJ,KAAKK,IAAIN,EAAMI,GAArB,OAAAC,OAAgCJ,KAAKM,IAAIP,EAAMI,GAA/C,OACRrB,EAAM,GAAAsB,OAAMJ,KAAKK,IAAIN,EAAMI,GAAQH,KAAKM,IAAIP,EAAMI,KAEpDnB,EAAKG,SAAS,CACZN,WAAUC,SACVF,YAAaoB,KAAKM,IAAI,IAAItB,EAAKN,MAAME,YAAc,IACnDD,MAAOK,EAAKN,MAAMC,MAAQK,EAAKN,MAAME,YAAc,EACnDG,cAAe,UAGjBO,IAAE,aAAaiB,SAAS,sBAEK,KAAtBvB,EAAKN,MAAMI,QAAiBa,EAAIA,KAAO,KAAOA,EAAIA,KAAO,KAClEX,EAAKG,SAAS,CAACJ,cAAeC,EAAKN,MAAMK,cAAgBY,EAAIA,yCAMjE,OACE7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,eAAd,oBACP1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAACN,EAAD,CAAeG,MAAOS,KAAKI,MAAME,gBAExCd,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,KAAGwC,UAAU,aAAb,UAAiClC,KAAKI,MAAMC,QACjDb,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,KAAGwC,UAAU,cAAb,WAAmClC,KAAKI,MAAME,eAErDd,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGwC,UAAU,YAAYlC,KAAKI,MAAMG,SAAUP,KAAKI,MAAMK,yBAvEnD0B,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAS1B,SAAS2B,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6eb0f590.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Progress, Col } from 'reactstrap';\nimport $ from \"jquery\";\nimport './App.css';\nimport 'animate.css'\n\nfunction PerformaceBar(props) {\n  let color;\n  if (props.value > 90)\n    color = 'danger';\n  else if (props.value > 70)\n    color = 'warning';\n  return (\n    <Progress value={props.value} color={color}/>\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      score: 0,\n      performance: 0,\n      question: 'Wciśnij ENTER by zacząć!',\n      anwser: '',\n      currentAnwser: ''\n    }\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      let newLevel = this.state.performance - 1;\n      if (newLevel < 0)\n        newLevel = 0;\n      this.setState({performance: newLevel})\n      \n    }, 600);\n    console.log($(document))\n    $(document).keyup(() => { $('.question').removeClass('animated shake'); });\n    $(document).keydown((key) => {\n      $('.question').removeClass('animated shake');\n      if (key.which === 8) {\n        this.setState({currentAnwser: this.state.currentAnwser.slice(0, -1) })\n      } else if (key.which === 13) {\n        if (this.state.currentAnwser === this.state.anwser) {\n          let limit = 20;\n          if (this.state.performance > 50) limit = 30;\n          if (this.state.performance > 60) limit = 40;\n          if (this.state.performance > 90) limit = 50;\n          const argA = Math.floor(Math.random() * limit);\n          const argB = Math.floor(Math.random() * limit);\n          let question, anwser;\n          if (Math.random() > 0.5) {\n            question = `${argA} + ${argB} = `;\n            anwser = `${argA + argB}`;\n          } else {\n            question = `${Math.max(argA, argB)} - ${Math.min(argA, argB)} = `;\n            anwser = `${Math.max(argA, argB) - Math.min(argA, argB)}`;\n          }\n          this.setState({\n            question, anwser,\n            performance: Math.min(100,this.state.performance + 25),\n            score: this.state.score + this.state.performance + 1,\n            currentAnwser: ''\n          });\n        } else {\n          $('.question').addClass('animated shake');\n        }\n      } else if (this.state.anwser !== '' && key.key >= '0' && key.key <= '9') {\n        this.setState({currentAnwser: this.state.currentAnwser + key.key });\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col><h1 className=\"text-center\">Obliczeniowiec</h1></Col></Row>\n        <Row>\n          <Col><PerformaceBar value={this.state.performance}/></Col>\n        </Row>\n        <Row>\n          <Col><p className=\"text-left\">Wynik: {this.state.score}</p></Col>\n          <Col><p className=\"text-right\">Poziom: {this.state.performance}</p></Col>\n        </Row>\n        <Row>\n          <Col>\n            <p className=\"question\">{this.state.question}{this.state.currentAnwser}</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}